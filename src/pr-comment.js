import * as core from '@actions/core'
import * as github from '@actions/github'

/**
 * Get GitHub context and PR information
 * @returns {Object} GitHub context and PR details
 */
function getGitHubContext() {
  const context = github.context

  if (
    context.eventName !== 'pull_request' &&
    context.eventName !== 'pull_request_target'
  ) {
    return null
  }

  return {
    context,
    owner: context.repo.owner,
    repo: context.repo.repo,
    pullNumber: context.payload.pull_request?.number
  }
}

/**
 * Format review results into a markdown comment
 * @param {Array} reviews - Array of review results for each file
 * @returns {string} Formatted markdown comment
 */
function formatReviewComment(reviews) {
  if (!reviews || reviews.length === 0) {
    return '## ðŸ¤– AI Code Review\n\nNo files were reviewed.'
  }

  let comment = '## ðŸ¤– AI Code Review\n\n'
  comment += `**Reviewed ${reviews.length} file(s)**\n\n`

  reviews.forEach((review, index) => {
    comment += `### ðŸ“„ \`${review.fileName}\`\n\n`
    comment += '```\n'
    comment += review.content
    comment += '\n```\n\n'

    if (index < reviews.length - 1) {
      comment += '---\n\n'
    }
  })

  comment += '\n*Generated by AI Code Review Action*'

  return comment
}

/**
 * Find existing AI review comment on the PR
 * @param {Object} octokit - GitHub API client
 * @param {Object} prInfo - PR information
 * @returns {Promise<Object|null>} Existing comment or null
 */
async function findExistingComment(octokit, prInfo) {
  try {
    const comments = await octokit.rest.issues.listComments({
      owner: prInfo.owner,
      repo: prInfo.repo,
      issue_number: prInfo.pullNumber
    })

    const botComment = comments.data.find(
      (comment) =>
        comment.body.includes('## ðŸ¤– AI Code Review') &&
        comment.body.includes('Generated by AI Code Review Action')
    )

    return botComment || null
  } catch (error) {
    core.warning(`Failed to fetch existing comments: ${error.message}`)
    return null
  }
}

/**
 * Create or update PR comment with review results
 * @param {Array} reviews - Array of review results
 * @returns {Promise<void>}
 */
export async function postReviewComment(reviews) {
  try {
    const token = core.getInput('github-token')
    const shouldPostComment = core.getInput('post-comment') === 'true'

    if (!shouldPostComment) {
      core.info('PR comment posting is disabled')
      return
    }

    if (!token) {
      core.warning('GitHub token not provided. Cannot post PR comment.')
      return
    }

    const prInfo = getGitHubContext()
    if (!prInfo) {
      core.info('Not running in a pull request context. Skipping PR comment.')
      return
    }

    if (!prInfo.pullNumber) {
      core.warning(
        'Could not determine pull request number. Skipping PR comment.'
      )
      return
    }

    const octokit = github.getOctokit(token)
    const commentBody = formatReviewComment(reviews)

    // Try to find and update existing comment
    const existingComment = await findExistingComment(octokit, prInfo)

    if (existingComment) {
      core.info(`Updating existing PR comment (ID: ${existingComment.id})`)
      await octokit.rest.issues.updateComment({
        owner: prInfo.owner,
        repo: prInfo.repo,
        comment_id: existingComment.id,
        body: commentBody
      })
    } else {
      core.info('Creating new PR comment')
      await octokit.rest.issues.createComment({
        owner: prInfo.owner,
        repo: prInfo.repo,
        issue_number: prInfo.pullNumber,
        body: commentBody
      })
    }

    core.info('âœ… Successfully posted AI review comment to PR')
  } catch (error) {
    core.error(`Failed to post PR comment: ${error.message}`)
  }
}

/**
 * Check if the action is running in a PR context
 * @returns {boolean} True if running in a PR context
 */
export function isPullRequestContext() {
  const context = github.context
  return (
    context.eventName === 'pull_request' ||
    context.eventName === 'pull_request_target'
  )
}
